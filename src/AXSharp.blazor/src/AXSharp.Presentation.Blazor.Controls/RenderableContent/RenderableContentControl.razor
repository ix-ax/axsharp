@*This class is view part of RenderableContentControl. It contains UI generation pipeline.*@

    @*Call rendering method over context object*@
    <div name="@_context.Symbol.Replace(".","-")" class="@Class">
        @RenderComponent(_context)
    </div>



@code
{
    private RenderFragment RenderComponent(ITwinElement element) => __builder =>
    {
        // if it is primitive type, just generate
        if (element is ITwinPrimitive)
        {
            @GenerateValueTag(element)
            return;
        }

        //try to find complex component (also try predecessors) and generate it
        var twin = (ITwinObject)element;
        var twinType = twin.GetType();
        var component = ViewLocatorBuilder(twinType, twin, Presentation);
        if (component != null)
        {
            @CreateComplexComponent(twin, component);
        }
        else
        {
            var groupName = String.IsNullOrEmpty(twin.AttributeName) ? twin.GetSymbolTail() : twin.AttributeName;
            //otherwise render children and set MainLayout
                <GroupContainerAttributeSetter GroupType="_groupContainer" GroupName="@groupName">
                    <MainLayoutSetter LayoutType="@MainLayoutType" GroupBoxName="@groupName" LayoutClass="@LayoutClass">
                        @RenderChildren(twin, MainLayoutType)
                    </MainLayoutSetter>
                </GroupContainerAttributeSetter>
        }
    };

    private RenderFragment RenderChildren(ITwinObject twin, Type parentLayout) => __builder =>
    {
        var children = twin.GetKids();
        var enumerator = children.GetEnumerator();
        bool canEnumerate = enumerator.MoveNext();
        while (canEnumerate)
        {
            var child = enumerator.Current;
            if (HasRenderIgnoreAttribute(Presentation.ToString(), child))
            {
                canEnumerate = enumerator.MoveNext();
                continue;
            }
            if (child == null) break;
            //detect, if we have groupLayout
            var groupLayout = TryLoadLayoutTypeFromProperty(child);
            if (groupLayout == null)
            {
                //if is complex object, and main layout is null, you can generate it to the base type
                if (child is ITwinObject && TryLoadLayoutType(child) == null)
                {
                    @Generator(child, parentLayout)
                }
                else
                { 
                    var name = String.IsNullOrEmpty(child.AttributeName) ? child.GetSymbolTail() : child.AttributeName;
                    //otherwise is value tag or has mainLayout set, add children layout and continue
                    <ChildrenLayoutPropSetter ChildName="@name"
                                              ChildrenLayout="@parentLayout"
                                              ChildContent="@Generator(child,null)"
                                              Class="@LayoutChildrenClass"/>
                }
                canEnumerate = enumerator.MoveNext();
            }
            else
            {
                //otherwise we have a group, create group layout and add children there
                var group = CreateGroup(enumerator, child, groupLayout, parentLayout, canEnumerate);
                var groupContainer = TryLoadGroupTypeFromProperty(child);

                <GroupLayoutSetter ParentLayout="@parentLayout"
                            GroupLayout="@groupLayout"
                            GroupContainer="@groupContainer"
                            GroupName="@group.GroupName"
                            LayoutClass="@LayoutClass">
                @RenderGroup(group, groupLayout)
                </GroupLayoutSetter>

            }

        }
    };


    private RenderFragment RenderGroup(Group group, Type groupLayout) => __builder =>
    {
        foreach (var child in group.GroupElements)
        {
           
            //if child is complex, we can again call recursively and generate it's groups
            if (child is ITwinObject complex)
            {
                @Generator(complex, group.GroupLayout)
            }
            else
            {
             var name = String.IsNullOrEmpty(child.AttributeName) ? child.GetSymbolTail() : child.AttributeName;
            <ChildrenLayoutPropSetter ChildName="@name"
                                      ChildrenLayout="@groupLayout"
                                      ChildContent="@Generator(child, groupLayout)"
                                      Class="@LayoutChildrenClass" />
            }
        }

    };
    
    private RenderFragment Generator(ITwinElement kid, Type layout) => __builder =>
    {
       
        if (IsEnumerator(kid))
        {
            var enumDiscriminatorAttribute = AttributesHandler.GetEnumeratorDiscriminatorAttribute(kid);
            @GenerateEnum(enumDiscriminatorAttribute, (ITwinPrimitive)kid)
        }
        else if (kid is OnlinerBase)
        {
            ITwinPrimitive primitiveKid = (ITwinPrimitive)kid;
            @GeneratePrimitive(primitiveKid)
        }
        else
        {
            ITwinObject complexKid = (ITwinObject)kid;
            @GenerateComplex(complexKid, layout)
        }

    };

    private RenderFragment GenerateComplex(ITwinObject twin, Type layout) => __builder =>
    {
        Type mainLayout = null;
      
        var component = ViewLocatorBuilder(twin.GetType(), twin, Presentation);
        if (component != null)
        {
            var name = String.IsNullOrEmpty(twin.AttributeName) ? twin.GetSymbolTail() : twin.AttributeName;
            <ChildrenLayoutPropSetter ChildName="@name"
                                      ChildrenLayout="layout"
                                      ChildContent="@CreateComplexComponent(twin, component)"
                                      Class="@LayoutChildrenClass" />
        }
        else
        {
            if(TryLoadLayoutTypeFromProperty(twin) == null)
            {
                mainLayout = TryLoadLayoutType(twin);
            }
           
            <ArrayBorderSetter IsArray="@CheckForArray(twin)" Name="@twin.GetSymbolTail()">
                @if (mainLayout != null)
                {
                    //try load group type from twin
                    var groupContainer = TryLoadGroupType(twin);
                    var groupName = String.IsNullOrEmpty(twin.AttributeName) ? twin.GetSymbolTail() : twin.AttributeName;
                    <GroupContainerAttributeSetter GroupType="groupContainer" GroupName="@groupName">
                        <MainLayoutSetter LayoutType="mainLayout" GroupBoxName="@groupName" LayoutClass="@LayoutClass">
                            @RenderChildren(twin, mainLayout)
                        </MainLayoutSetter>
                    </GroupContainerAttributeSetter>
                }
                else
                {
                    @RenderChildren(twin, layout)
                }
            </ArrayBorderSetter>
        }
    };


    private RenderFragment GeneratePrimitive(ITwinPrimitive primitiveKid) => __builder =>
    {
        string presentationType = GetDisplayPresentationIfEmpty();
        var primitiveKidType = primitiveKid.GetType();
        var primitiveComponent = ViewLocatorBuilder(primitiveKidType, primitiveKid, presentationType);
        @CreatePrimitiveComponent(primitiveKid, primitiveComponent)
    };


    private RenderFragment GenerateEnum(EnumeratorDiscriminatorAttribute enumDiscriminatorAttribute, ITwinPrimitive kid) => __builder =>
    {
        string presentationType = GetDisplayPresentationIfEmpty();
        var enumKidType = kid.GetType()?.BaseType ?? kid.GetType();
        var component = ViewEnumLocatorBuilder(enumKidType, presentationType);
        @CreateEnumComponent(enumDiscriminatorAttribute, kid, component)
     };

    private RenderFragment GenerateValueTag(ITwinElement element) => __builder =>
    {
        if (IsEnumerator(element))
        {
            @GenerateEnum(AttributesHandler.GetEnumeratorDiscriminatorAttribute(element), (ITwinPrimitive)element)
        }
        else
        {
            @GeneratePrimitive((ITwinPrimitive)element)
        }
    };

}
